# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the Odoo plugin for Dia !
from odoo import api, fields, models

class NOTAS_ESTUDIANTE(models.Model):
    _name = 'Diagrama1.notas_estudiante'
    id_nts_est = fields.Integer()
    id_estudiante = fields.Integer()

class DOCENTE_UC(models.Model):
    _name = 'Diagrama1.docente_uc'
    id_docente_uc = fields.Integer()
    id_proyecto_dc = fields.Integer()

class ESTUDIANTE(models.Model):
    _name = 'Diagrama1.estudiante'
    id_estudiante = fields.Integer()
    id_docente_uc = fields.Integer()

class CARGA_NOTA(models.Model):
    _name = 'Diagrama1.car_nota'
    id_carg_nt = fields.Integer()
    id_nts_est = fields.Integer()

class UC(models.Model):
    _name = 'Diagrama1.uc'
    id_unidad_curricular = fields.Integer()
    id_docente_uc = fields.Integer()

class SEMESTRE(models.Model):
    _name = 'Diagrama1.semestre'
    id_semestre = fields.Integer()

class PROYECTO_DOCENTE(models.Model):
    _name = 'Diagrama1.proyecto_docente'
    id_proyecto_dc = fields.Integer()
    id_docente = fields.Integer()

class PNF(models.Model):
    _name = 'Diagrama1.pnf'
    id_pnf = fields.Integer()
    id_estudiante = fields.Integer()

class TRAYECTO_SEMESTRE(models.Model):
    _name = 'Diagrama1.trayecto_semestre'
    id_try_sem = fields.Integer()
    id_semestre = fields.Integer()

class TURNO(models.Model):
    _name = 'Diagrama1.turno'
    id_turno = fields.Integer()
    id_aula = fields.Integer()

class HORARIO_NUCLEO(models.Model):
    _name = 'Diagrama1.horario_nucleo'
    id_hr_nclo = fields.Integer()
    id_nucleo = fields.Integer()

class NUCLEO(models.Model):
    _name = 'Diagrama1.nucleo'
    id_nucleo = fields.Integer()
    id_turno = fields.Integer()

class AULA(models.Model):
    _name = 'Diagrama1.aula'
    id_aula = fields.Integer()

class ESTADISTICA(models.Model):
    _name = 'Diagrama1.estadistica'
    id_estadistica = fields.Integer()
    id_try_sem = fields.Integer()
    id_pnf = fields.Integer()
    id_unidad_curricular = fields.Integer()
    id_hr_nclo = fields.Integer()

    def calcular_promedio(self):
        notas = self.env['Diagrama1.notas_estudiante'].search([('id_try_sem', '=', self.id_try_sem),
                                                      ('id_pnf', '=', self.id_pnf),
                                                      ('id_unidad_curricular', '=', self.id_unidad_curricular)])
        total = 0
for nota in notas:
        total += nota.valor
    if len(notas) > 0:
        promedio = total / len(notas)
        return promedio
    else:
        return 0

def obtener_docentes_uc(self):
    docentes_uc = []
    ucs = self.env['mi_modulo.uc'].search([('id_try_sem', '=', self.id_try_sem),
                                 ('id_pnf', '=', self.id_pnf),
                                 ('id_unidad_curricular', '=', self.id_unidad_curricular)])
    for uc in ucs:
        docente_uc = self.env['mi_modulo.docente_uc'].search([('id_docente_uc', '=', uc.id_docente_uc.id)])
        if docente_uc:
            docentes_uc.append(docente_uc.id_docente.id)
    return docentes_uc

def obtener_aulas(self):
    aulas = []
    nucleos = self.env['mi_modulo.nucleo'].search([('id_try_sem', '=', self.id_try_sem)])
    for nucleo in nucleos:
        horarios = self.env['mi_modulo.horario_nucleo'].search([('id_nucleo', '=', nucleo.id_nucleo),
                                                      ('id_hr_nclo', '=', self.id_hr_nclo)])
        for horario in horarios:
            aulas.append(horario.id_aula.id)
    return aulas